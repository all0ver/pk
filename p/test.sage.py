

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5)# Dowód o wiedzy logarytmu dyskretnego — SageMath
# Imię i nazwisko: [TWOJE DANE]
# Grupa: [TWOJA GRUPA]

from random import randint

# --- Krok 1: Generacja parametrów ---
def generuj_parametry(bit_length=_sage_const_10 ):
    # Znajdź losową liczbę pierwszą p
    p = random_prime(_sage_const_2 **bit_length, lbound=_sage_const_2 **(bit_length-_sage_const_1 ))
    
    # Ciało F_p
    F = GF(p)
    
    # Znajdź generator grupy multiplikatywnej
    a = F.multiplicative_generator()
    
    # Losowe x < p-1, x względnie pierwsze z p-1
    while True:
        x = randint(_sage_const_2 , p-_sage_const_2 )
        if gcd(x, p-_sage_const_1 ) == _sage_const_1 :
            break
    
    b = a**x  # b = a^x mod p

    return p, a, b, x

# --- Krok 2: Jedna runda protokołu ---
def wykonaj_runde(p, a, b, x):
    F = GF(p)

    # A wybiera losowe r
    r = randint(_sage_const_1 , p - _sage_const_2 )
    h = a**r
    print("Krok 1 (A): r =", r, ", h = a^r =", h)
    
    # B wybiera losowy bit k
    k = randint(_sage_const_0 , _sage_const_1 )
    print("Krok 2 (B): k =", k)
    
    # A oblicza s = r + kx mod (p-1)
    s = (r + k * x) % (p - _sage_const_1 )
    print("Krok 3 (A): s =", s)
    
    # B sprawdza warunek: a^s == h * b^k mod p
    lewa = a**s
    prawa = h * b**k
    print("Krok 4 (B): Sprawdzenie: a^s =", lewa, ", h * b^k =", prawa)
    print(">>> Wynik:", "OK" if lewa == prawa else "NIEPOWODZENIE")

# --- Wykonanie całego protokołu ---
def protokol(t=_sage_const_5 , bit_length=_sage_const_10 ):
    p, a, b, x = generuj_parametry(bit_length)
    print("Parametry: p =", p)
    print("a =", a)
    print("b = a^x =", b)
    print("x (tajne) =", x)
    print("----------\n")

    for i in range(_sage_const_1 , t+_sage_const_1 ):
        print("=== RUNDA", i, "===")
        wykonaj_runde(p, a, b, x)
        print("")

# Uruchomienie protokołu z 5 rundami
protokol(t=_sage_const_5 , bit_length=_sage_const_10 )

