

# This file was *autogenerated* from the file 1.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_16 = Integer(16); _sage_const_32 = Integer(32); _sage_const_1 = Integer(1)# Mateusz Karpiński
# WCY23KY1S1
# Laboratoria 4

# generacja podpisu

import random 

print("Zalozenia")

print("Wylosowanie liczby pierwszej p i q")
while True:
    q = random_prime(_sage_const_2 **_sage_const_16 , _sage_const_2 **_sage_const_32 )
    p = _sage_const_2 *q+_sage_const_1 
    if (is_prime(p) == _sage_const_1 ):
        break

print("p: ", p)
print("q: ", q)
print("Zdefiniowanie ciala F_p")
F = GF(p)

print("Znalezienie generatora g podgrupy cyklicznej rzedu q")
while True:
    h = random.randint(_sage_const_2 , p-_sage_const_1 )
    g = (h**((p-_sage_const_1 )/q))%p
    if (g != _sage_const_1 ):
        break

print("g: ", g)

print("Generowanie kluczy prywatnych x,z z przedzialu  <1, ..., q-1>")
x = random.randint(_sage_const_1 , q-_sage_const_1 )
z = random.randint(_sage_const_1 , q-_sage_const_1 )

print("Generowanie kluczy publicznych y = g^x oraz u = g^z")
y = (g**x)%p
u = (g**z)%p
print("Pierwsza para kluczy")
print("x = ", x)
print("y = ", y)
print("Druga para kluczy")
print("z = ", z)
print("u = ", u)

m = random.randint(_sage_const_2 , q-_sage_const_1 )
print("Wiadomosc m: ", m)


print()
print()
print()
print("Generacja podpisu")
print("K1. A wybiera losowe t z przedzialu <1, ..., q-1>")
t = random.randint(_sage_const_1 , q-_sage_const_1 )
print("t = ", t)

print("A oblicza T = g^t (mod p) i m' = Ttzm (mod q)")

T = (g**t)%p
ma = (Integer(T) * t * z * m) % q

print("T = ", T)
print("m' = ", ma)

print()
print("K2. A wybiera losowe R z przedzialu: <1, ..., p-2>, gdzie NWD(R, p-1) = 1")
while True:
    R = random.randint(_sage_const_1 , p-_sage_const_2 )
    if gcd(R, p-_sage_const_1 ) == _sage_const_1 :
        break
print("R = ", R)

print("K2. A oblicza r = g^R (mod p)")
r = (g**R)%p
print("r = ", r)

print()
print("K3. A oblicza s, ktore spelnia: m' = rx+Rs (mod q)")

R1 = pow(R, -_sage_const_1 , q)
s = ((ma-(Integer(r)*x))/R)%q

print("s = ", s)

# Sprawdzenie poprawności obliczenia s
lewa_strona = ma
prawa_strona = (Integer(r) * x + R * s) % q
if lewa_strona == prawa_strona:
    print("Rownanie m' = rx + Rs (mod q) jest spelnione.")
else:
    print("m' =", ma)
    print("rx + Rs =", prawa_strona)

print("Podpis A = <(r, s), T>:")
print(f"<({r}, {s}), {T}")


print()
print()
print()
print("Weryfikacja podpisu")

print()
print("K1. Uzytkownik B wytwarza dwie liczby losowe a i b. Oblicza: c = T^(T*m*a)*g^b (mod p) i przesyla c do A")
a = random.randint(_sage_const_1 , q-_sage_const_1 )
b = random.randint(_sage_const_1 , q-_sage_const_1 )
# c = (T^(T*m*a)*g^b)%p
c = (pow(T, T*m*a, p) * pow(g, b, p)) % p

print("a = ", a)
print("b = ", b)
print("c = ", c)

print()
print("K2. Uzytkownik A wytwarza liczbe losowa k i oblicza:")
k = random.randint(_sage_const_1 , q-_sage_const_1 )
print("h1 = c*g^k (mod p)")
print("h2 = h1^z (mod p)")

print("k = ", k)
h1 = (c*(g**k))%p
h2 = (h1**z)%p

print("h1 = ", h1)
print("h2 = ", h2)
print("Nastepuje przeslanie h1 i h2 do B")

print()
print("K3. Uzytkownik B przesyla do A wartosci a i b")
print("a = ", a)
print("b = ", b)

print()
print("K4. uzytkownik A sprawdza czy: c = T^(T*m*a)*g^b (mod p), jezeli tak to przsyla k do uzytkownika B, jezeli nie to koniec")

ca = (pow(T, T*m*a, p) * pow(g, b, p)) % p

if ca != c:
    print("c nie zgadza sie, koniec programu")
else:
    print("Weryfikacja c poprawna, A wysyła k do B")
    print()
    print("K5. Uzytkownik B oblicza: ")
    print("h1^ = T^(T*m*a)*g^(b+k) (mod p)")
    print("h2^ = y^(r*a)*r^(s*a)*u(b+k) (mod p)")

    h1b = (pow(T, T*m*a, p) * pow(g, b+k, p)) % p
    h2b = (pow(y, r*a, p) * pow(r, s*a, p) * pow(u, b+k, p)) % p
    print()
    print()
    print()
    print("Obliczone wartosci:")
    print("h1^ = ", h1b)
    print("h1 = ", h1)
    print("h2^ = ", h2b)
    print("h2 = ", h2)

    print("Weryfikacja 1 - poprawna")
    if h2 == h2b and h1 == h1b:
        # weryfikacja poprawna
        print("Podpis zostal potwierdzony, weryfikacja poprawna")

print()
print()
print()
print("Weryfikacja 3")

print("Weryfikacja podpisu")
print("Zamiana y1 na inny y")
f = random.randint(_sage_const_1 , q-_sage_const_1 )
oldy = y
y = (g**f)%p

a = random.randint(_sage_const_1 , q-_sage_const_1 )
b = random.randint(_sage_const_1 , q-_sage_const_1 )
# c = (T^(T*m*a)*g^b)%p
c = (pow(T, T*m*a, p) * pow(g, b, p)) % p
print()
k = random.randint(_sage_const_1 , q-_sage_const_1 )

print("k = ", k)
h1 = (c*(g**k))%p
h2 = (h1**z)%p



ca = (pow(T, T*m*a, p) * pow(g, b, p)) % p

if ca != c:
    print("c nie zgadza sie, koniec programu")
else:
    print("Weryfikacja c poprawna, A wysyła k do B")

    h1b = (pow(T, T*m*a, p) * pow(g, b+k, p)) % p
    h2b = (pow(y, r*a, p) * pow(r, s*a, p) * pow(u, b+k, p)) % p
    print()
    print()
    print()
    print("Obliczone wartosci:")
    print("h1^ = ", h1b)
    print("h1 = ", h1)
    print("h2^ = ", h2b)
    print("h2 = ", h2)

    print("Weryfikacja 1 - poprawna")
    if h2 == h2b and h1 == h1b:
        # weryfikacja poprawna
        print("Podpis zostal potwierdzony, weryfikacja poprawna")
    if h1 != h1b or h2 != h2b:
        print("Jedna z obliczonych wartosci sie nie zgadza")




print()
print()
print()
print("Werfyfikacja 2")
y = oldy
m2 = m+_sage_const_1 
# generowanie podpisu dla m2
t1 = random.randint(_sage_const_1 , q-_sage_const_1 )
T1 = (g**t1)%p
ma1 = (Integer(T) * t1 * z * m2) % q
while True:
    R1 = random.randint(_sage_const_1 , p-_sage_const_2 )
    if gcd(R1, p-_sage_const_1 ) == _sage_const_1 :
        break
r1 = (g**R)%p
R1 = pow(R, -_sage_const_1 , q)
s1 = ((ma1-(Integer(r1)*x))/R1)%q

# Sprawdzenie poprawności obliczenia s
lewa_strona = ma1
prawa_strona = (Integer(r) * x + R * s) % q
if lewa_strona == prawa_strona:
    print("Rownanie m1' = rx + Rs (mod q) jest spelnione.")
else:
    print("m' =", ma1)
    print("Otrzymany nowy podpis")
    print(f"<({r1}, {s1}), {T1}")
a = random.randint(_sage_const_1 , q-_sage_const_1 )
b = random.randint(_sage_const_1 , q-_sage_const_1 )
# c = (T^(T*m*a)*g^b)%p
c = (pow(T, T*m*a, p) * pow(g, b, p)) % p
print()
k = random.randint(_sage_const_1 , q-_sage_const_1 )

print("k = ", k)
h1 = (c*(g**k))%p
h2 = (h1**z)%p



ca = (pow(T, T*m2*a, p) * pow(g, b, p)) % p

if ca != c:
    print("c nie zgadza sie, koniec programu")
else:
    print("Weryfikacja c poprawna, A wysyła k do B")

    h1b = (pow(T, T*m*a, p) * pow(g, b+k, p)) % p
    h2b = (pow(y, r*a, p) * pow(r, s*a, p) * pow(u, b+k, p)) % p
    print()
    print()
    print()
    print("Obliczone wartosci:")
    print("h1^ = ", h1b)
    print("h1 = ", h1)
    print("h2^ = ", h2b)
    print("h2 = ", h2)

    print("Weryfikacja 1 - poprawna")
    if h2 == h2b and h1 == h1b:
        # weryfikacja poprawna
        print("Podpis zostal potwierdzony, weryfikacja poprawna")
    if h1 != h1b or h2 != h2b:
        print("Jedna z obliczonych wartosci sie nie zgadza")

